/**
 * Copyright (c) 2016-2017 in alphabetical order:
 * Bosch Software Innovations GmbH, Robert Bosch GmbH, Siemens AG
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * Denis Kramer     (Bosch Software Innovations GmbH)
 * Stefan Schmid    (Robert Bosch GmbH)
 * Andreas Ziller   (Siemens AG)
 */
package org.eclipse.bridgeiot.lib.offering;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.bridgeiot.lib.BridgeIotClientId;
import org.eclipse.bridgeiot.lib.model.AccessList;
import org.eclipse.bridgeiot.lib.model.Activation;
import org.eclipse.bridgeiot.lib.model.BridgeIotTypes.AccessInterfaceType;
import org.eclipse.bridgeiot.lib.model.BridgeIotTypes.FormatType;
import org.eclipse.bridgeiot.lib.model.BridgeIotTypes.LicenseType;
import org.eclipse.bridgeiot.lib.model.Description;
import org.eclipse.bridgeiot.lib.model.EndPoint;
import org.eclipse.bridgeiot.lib.model.IOData;
import org.eclipse.bridgeiot.lib.model.Price;
import org.eclipse.bridgeiot.lib.model.RDFType;
import org.eclipse.bridgeiot.lib.model.Region;
import org.eclipse.bridgeiot.lib.model.TimePeriod;
import org.eclipse.bridgeiot.lib.offering.encoder.MessageTemplates;
import org.eclipse.bridgeiot.lib.offering.mapping.OutputMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Pure data object representing offering description
 *
 *
 */
public class LegacyOfferingDescription {

    private static final Logger logger = LoggerFactory.getLogger(LegacyOfferingDescription.class);

    protected static ObjectMapper mapper = new ObjectMapper();

    protected String id; // Offering ID --> generated by Marketplace
    protected String localId; // needed to register Offering and for Marketplace to create a unique Offering ID
    protected String name; // needed to parse eXchange response
    protected RDFType rdfType; // needed to parse eXchange response
    protected String providerId;
    protected Description description = null;
    protected List<EndPoint> endpoints = new ArrayList<>(); // needed to parse eXchange response
    protected Region region = null;
    protected EndPoint sampleDataEnpoint = null;
    protected EndPoint metaDataEnpoint = null;
    protected Price price = Price.free();
    protected LicenseType license = LicenseType.OPEN_DATA_LICENSE;
    protected List<IOData> inputData = new ArrayList<>();
    protected List<IOData> outputData = new ArrayList<>();
    protected TimePeriod timePeriod = null;
    protected AccessList accessList = null;
    protected FormatType format = FormatType.FORMAT_JSONLD;
    protected Activation activation = null;
    protected MessageTemplates requestTemplates = null;
    protected OutputMapping mapping = null;
    // To be in Offering Description format
    private AccessInterfaceType accessInterfaceType = AccessInterfaceType.BRIDGEIOT_LIB; // TODO: duplicate here and in
                                                                                         // endpoints. Choose one
                                                                                         // location!

    // Needed for jackson de-serialization
    public LegacyOfferingDescription() {
    }

    /**
     * Creates offering description with local ID and provider ID.
     *
     * @param localId
     */
    public LegacyOfferingDescription(String localId) {
        this.setLocalId(localId);
    }

    /**
     * Creates offering description with local ID and provider ID.
     *
     * @param localId
     * @param providerId
     */
    public LegacyOfferingDescription(String localId, BridgeIotClientId providerId) {
        this.setLocalId(localId);
        if (providerId != null) {
            this.setProviderId(providerId.asString());
        }
    }

    /**
     * Returns offering ID generated by marketplace
     *
     * @return
     */
    public String getId() {
        return this.id;
    }

    /**
     * Overrides offering ID generated by marketplace
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Returns offering name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Overrides offering name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns rdf type category of offering
     */
    public RDFType getRdfType() {
        return this.rdfType;
    }

    /**
     * Overrides rdf type category of offering
     */
    @JsonProperty("rdfAnnotation")
    public void setRdfType(RDFType rdfType) {
        this.rdfType = rdfType;
    }

    public String getProviderId() {
        return this.providerId;
    }

    public void setProviderId(String providerId) {
        this.providerId = providerId;
    }

    /**
     * Returns local id used for internal purposes
     */
    public String getLocalId() {
        return this.localId;
    }

    /**
     * Overrides local id
     */
    public void setLocalId(String localId) {
        this.localId = localId;
    }

    public Description getDescription() {
        return this.description;
    }

    public void setDescription(Description description) {
        this.description = description;
    }

    public List<EndPoint> getEndpoints() {
        return this.endpoints;
    }

    public void setEndpoints(List<EndPoint> endpoints) {
        this.endpoints = endpoints;
    }

    public void addEndpoint(EndPoint endpoint) {
        this.endpoints.add(endpoint);
    }

    public Region getRegion() {
        return region;
    }

    @JsonProperty("spatialExtent")
    public void setRegion(Region region) {
        this.region = region;
    }

    public Price getPrice() {
        return this.price;
    }

    public void setPrice(Price price) {
        this.price = price;
    }

    public LicenseType getLicense() {
        return this.license;
    }

    public void setLicense(LicenseType license) {
        this.license = license;
    }

    public List<IOData> getInputData() {
        return this.inputData;
    }

    @JsonProperty("inputs")
    public void setInputData(List<IOData> inputData) {
        this.inputData = inputData;
    }

    public void addInputData(IOData inputData) {
        this.inputData.add(inputData);
    }

    public List<IOData> getOutputData() {
        return this.outputData;
    }

    @JsonProperty("outputs")
    public void setOutputData(List<IOData> outputData) {
        this.outputData = outputData;
    }

    public void addOutputData(IOData outputData) {
        this.outputData.add(outputData);
    }

    public FormatType getFormat() {
        return this.format;
    }

    public void setFormat(FormatType format) {
        this.format = format;
    }

    public Activation getActivation() {
        return this.activation;
    }

    public void setActivation(Activation activation) {
        this.activation = activation;
    }

    public AccessInterfaceType getAccessInterfaceType() {
        return this.accessInterfaceType;
    }

    public void setAccessInterfaceType(AccessInterfaceType accessInterfaceType) {
        this.accessInterfaceType = accessInterfaceType;
    }

    public TimePeriod getTimePeriod() {
        return this.timePeriod;
    }

    @JsonProperty("temporalExtent")
    public void setTimePeriod(TimePeriod period) {
        this.timePeriod = period;
    }

    public AccessList getAccessList() {
        return this.accessList;
    }

    public void setAccessList(AccessList accessList) {
        this.accessList = accessList;
    }

    public EndPoint getSampleDataEnpoint() {
        return sampleDataEnpoint;
    }

    public void setSampleDataEnpoint(EndPoint sampleDataEnpoint) {
        this.sampleDataEnpoint = sampleDataEnpoint;
    }

    public EndPoint getMetaDataEnpoint() {
        return metaDataEnpoint;
    }

    public void setMetaDataEnpoint(EndPoint metaDataEnpoint) {
        this.metaDataEnpoint = metaDataEnpoint;
    }

    public MessageTemplates getRequestTemplates() {
        return this.requestTemplates;
    }

    public void setRequestTemplates(MessageTemplates requestTemplates) {
        this.requestTemplates = requestTemplates;
    }

    public OutputMapping getResponseMapping() {
        return this.mapping;
    }

    public void setResponseMapping(OutputMapping mapping) {
        this.mapping = mapping;
    }
    //
    // public SubscribableOfferingDescription convertToNewType() {
    // SubscribableOfferingDescription newOfferingDescription = SubscribableOfferingDescription.create(null);
    //
    // newOfferingDescription.setId(id);
    // newOfferingDescription.setLocalId(localId);
    // newOfferingDescription.setName(name);
    // newOfferingDescription.setRdfType(rdfType);
    // newOfferingDescription.setProviderId(providerId);
    // newOfferingDescription.setDescription(description);
    // newOfferingDescription.setEndpoints(endpoints);
    // newOfferingDescription.setRegion(region);
    // newOfferingDescription.setSampleDataEnpoint(sampleDataEnpoint);
    // newOfferingDescription.setMetaDataEnpoint(metaDataEnpoint);
    // newOfferingDescription.setPrice(price);
    // newOfferingDescription.setLicense(license);
    // newOfferingDescription.setInputs(ObjectParameter.from(inputData));
    // newOfferingDescription.setOutputs(ObjectParameter.from(inputData));
    // newOfferingDescription.setTimePeriod(timePeriod);
    // newOfferingDescription.setAccessList(accessList);
    // newOfferingDescription.setFormat(format);
    // newOfferingDescription.setActivation(activation);
    // newOfferingDescription.setRequestTemplates(requestTemplates);
    // newOfferingDescription.setResponseMapping(mapping);
    //
    // return newOfferingDescription;
    // }

    @Override
    public String toString() {
        String response = "OFFERING[localId=" + id;
        if (name != null) {
            response += ", name=" + name;
        }
        if (description != null) {
            response += ", " + description.toString();
        }
        if (rdfType != null) {
            response += ", " + rdfType.toString();
        }
        if (endpoints != null && !endpoints.isEmpty()) {
            response += ", " + endpoints.get(0).toString();
        }
        if (inputData != null && !inputData.isEmpty()) {
            response += ", inputs=" + inputData.get(0).toString();
        }
        if (outputData != null && !outputData.isEmpty()) {
            response += ", outputs=" + outputData.get(0).toString();
        }
        if (region != null) {
            response += ", " + region.toString();
        }
        if (price != null) {
            response += ", " + price.toString();
        }
        if (license != null) {
            response += ", " + license.toString();
        }
        if (mapping != null) {
            response += ", " + mapping.toString();
        }
        response += "]";
        return response;
    }

    // Delete
    // public static List<LegacyOfferingDescription> unmarshallLegacyDiscoverResponse(String jsonString) {
    // List<LegacyOfferingDescription> offeringDescriptions = new ArrayList<LegacyOfferingDescription>();
    // try {
    //
    // JSONObject jsonObject = new JSONObject(jsonString);
    // String rootKey = jsonObject.keys().next();
    // JSONArray offeringArray = (JSONArray) jsonObject.getJSONObject(rootKey).get("matchingOfferings");
    // offeringDescriptions = mapper.readValue(offeringArray.toString(), new
    // TypeReference<List<LegacyOfferingDescription>>() {
    // });
    // } catch (JSONException | IOException e) {
    // logger.error(e.getMessage());
    // throw new BridgeIoTException("Unmarshalling discover response from eXchange failed!");
    // }
    // return offeringDescriptions;
    // }

}