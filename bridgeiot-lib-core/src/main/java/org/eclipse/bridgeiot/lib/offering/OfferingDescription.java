/**
 * Copyright (c) 2016-2017 in alphabetical order:
 * Bosch Software Innovations GmbH, Robert Bosch GmbH, Siemens AG
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 * Denis Kramer     (Bosch Software Innovations GmbH)
 * Stefan Schmid    (Robert Bosch GmbH)
 * Andreas Ziller   (Siemens AG)
 */
package org.eclipse.bridgeiot.lib.offering;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.bridgeiot.lib.BridgeIotClientId;
import org.eclipse.bridgeiot.lib.exceptions.BridgeIoTException;
import org.eclipse.bridgeiot.lib.model.AccessList;
import org.eclipse.bridgeiot.lib.model.Activation;
import org.eclipse.bridgeiot.lib.model.BridgeIotTypes.AccessInterfaceType;
import org.eclipse.bridgeiot.lib.model.BridgeIotTypes.FormatType;
import org.eclipse.bridgeiot.lib.model.BridgeIotTypes.LicenseType;
import org.eclipse.bridgeiot.lib.model.Description;
import org.eclipse.bridgeiot.lib.model.EndPoint;
import org.eclipse.bridgeiot.lib.model.Information;
import org.eclipse.bridgeiot.lib.model.Price;
import org.eclipse.bridgeiot.lib.model.RDFType;
import org.eclipse.bridgeiot.lib.model.Region;
import org.eclipse.bridgeiot.lib.model.TimePeriod;
import org.eclipse.bridgeiot.lib.offering.encoder.MessageTemplates;
import org.eclipse.bridgeiot.lib.offering.mapping.OutputMapping;
import org.eclipse.bridgeiot.lib.offering.parameters.ObjectParameter;
import org.eclipse.bridgeiot.lib.offering.parameters.Parameter;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Pure data object representing offering description
 *
 *
 */
public class OfferingDescription {

    protected String id; // Offering ID --> generated by Marketplace
    protected String localId; // needed to register Offering and for Marketplace to create a unique Offering ID
    protected String name; // needed to parse eXchange response
    protected RDFType rdfType; // needed to parse eXchange response
    protected String providerId;
    protected Description description = null;
    protected List<EndPoint> endpoints = new ArrayList<>(); // needed to parse eXchange response
    protected Region region = null;
    protected EndPoint sampleDataEnpoint = null;
    protected EndPoint metaDataEnpoint = null;
    protected Price price = Price.free();
    protected LicenseType license = LicenseType.OPEN_DATA_LICENSE;
    protected Parameter inputs = ObjectParameter.create();
    protected Parameter outputs = ObjectParameter.create();
    protected TimePeriod timePeriod = null;
    protected AccessList accessList = null;
    protected FormatType format = FormatType.FORMAT_JSONLD;
    protected Activation activation = null;
    protected MessageTemplates requestTemplates = null;
    protected OutputMapping mapping = null;
    protected String extension1; // Used for inputs and outputs structure signaling
    protected String extension2;
    protected String extension3;

    // To be in Offering Description format
    private AccessInterfaceType accessInterfaceType = AccessInterfaceType.BRIDGEIOT_LIB; // TODO: duplicate here and in
                                                                                         // endpoints. Choose one
                                                                                         // location!

    // Needed for jackson de-serialization
    public OfferingDescription() {
    }

    /**
     * Creates offering description with local ID and provider ID.
     *
     * @param localId
     */
    public OfferingDescription(String localId) {
        this.setLocalId(localId);
    }

    /**
     * Creates offering description with local ID and provider ID.
     *
     * @param localId
     * @param providerId
     */
    public OfferingDescription(String localId, BridgeIotClientId providerId) {
        this.setLocalId(localId);
        if (providerId != null) {
            this.setProviderId(providerId.asString());
        }
    }

    /**
     * Creates offering description with local ID
     *
     * @param localId
     */
    public static RegistrableOfferingDescriptionChain createOfferingDescription(String localId) {
        return new RegistrableOfferingDescriptionChain(localId, null, null, null, null);
    }

    /**
     * Returns offering ID generated by marketplace
     *
     * @return
     */
    public String getId() {
        return this.id;
    }

    /**
     * Overrides offering ID generated by marketplace
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Returns offering name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Overrides offering name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns rdf type category of offering
     */
    public RDFType getRdfType() {
        return this.rdfType;
    }

    /**
     * Overrides rdf type category of offering
     */
    @JsonProperty("rdfAnnotation")
    public void setRdfType(RDFType rdfType) {
        this.rdfType = rdfType;
    }

    public String getProviderId() {
        return this.providerId;
    }

    public void setProviderId(String providerId) {
        this.providerId = providerId;
    }

    /**
     * Returns local id used for internal purposes
     */
    public String getLocalId() {
        return this.localId;
    }

    /**
     * Overrides local id
     */
    public void setLocalId(String localId) {
        this.localId = localId;
    }

    public Description getDescription() {
        return this.description;
    }

    public void setDescription(Description description) {
        this.description = description;
    }

    public List<EndPoint> getEndpoints() {
        return this.endpoints;
    }

    public void setEndpoints(List<EndPoint> endpoints) {
        this.endpoints = endpoints;
    }

    public void addEndpoint(EndPoint endpoint) {
        this.endpoints.add(endpoint);
    }

    public Region getRegion() {
        return region;
    }

    @JsonProperty("spatialExtent")
    public void setRegion(Region region) {
        this.region = region;
    }

    public Price getPrice() {
        return this.price;
    }

    public void setPrice(Price price) {
        this.price = price;
    }

    public LicenseType getLicense() {
        return this.license;
    }

    public void setLicense(LicenseType license) {
        this.license = license;
    }

    public Parameter getInputs() {
        return inputs;
    }

    public void setInputs(Parameter inputs) {
        this.inputs = inputs;
    }

    public Parameter getOutputs() {
        return outputs;
    }

    public void setOutputs(Parameter outputs) {
        this.outputs = outputs;
    }

    public FormatType getFormat() {
        return this.format;
    }

    public void setFormat(FormatType format) {
        this.format = format;
    }

    public Activation getActivation() {
        return this.activation;
    }

    public void setActivation(Activation activation) {
        this.activation = activation;
    }

    public AccessInterfaceType getAccessInterfaceType() {
        return this.accessInterfaceType;
    }

    public void setAccessInterfaceType(AccessInterfaceType accessInterfaceType) {
        this.accessInterfaceType = accessInterfaceType;
    }

    public TimePeriod getTimePeriod() {
        return this.timePeriod;
    }

    @JsonProperty("temporalExtent")
    public void setTimePeriod(TimePeriod period) {
        this.timePeriod = period;
    }

    public AccessList getAccessList() {
        return this.accessList;
    }

    public void setAccessList(AccessList accessList) {
        this.accessList = accessList;
    }

    public EndPoint getSampleDataEnpoint() {
        return sampleDataEnpoint;
    }

    public void setSampleDataEnpoint(EndPoint sampleDataEnpoint) {
        this.sampleDataEnpoint = sampleDataEnpoint;
    }

    public EndPoint getMetaDataEnpoint() {
        return metaDataEnpoint;
    }

    public void setMetaDataEnpoint(EndPoint metaDataEnpoint) {
        this.metaDataEnpoint = metaDataEnpoint;
    }

    public MessageTemplates getRequestTemplates() {
        return this.requestTemplates;
    }

    public void setRequestTemplates(MessageTemplates requestTemplates) {
        this.requestTemplates = requestTemplates;
    }

    public OutputMapping getResponseMapping() {
        return this.mapping;
    }

    public void setResponseMapping(OutputMapping mapping) {
        this.mapping = mapping;
    }

    public String getExtension1() {
        return extension1;
    }

    public void setExtension1(String extension1) {
        this.extension1 = extension1;
    }

    public String getExtension2() {
        return extension2;
    }

    public void setExtension2(String extension2) {
        this.extension2 = extension2;
    }

    public String getExtension3() {
        return extension3;
    }

    public void setExtension3(String extension3) {
        this.extension3 = extension3;
    }

    public void updateOfferingDescription(OfferingDescription offeringDescription) {
        setId(offeringDescription.getId());
        if ((this.getLocalId() != null) && (this.getProviderId() != null) && this.getLocalId().isEmpty()) {
            if (offeringDescription.getId().contains(this.getProviderId())) {
                String newlocalId = offeringDescription.getId().substring(this.getProviderId().length() + 1);
                setLocalId(newlocalId);
            } else {
                throw new BridgeIoTException("ERROR: Offering Id must match Provider Id, or LocalId must be set!");
            }
        }
        setName(offeringDescription.getName());
        setRdfType(offeringDescription.getRdfType());
        setDescription(new Information(offeringDescription.getName(), offeringDescription.getRdfType()));
        setRegion(offeringDescription.getRegion());
        setPrice(offeringDescription.getPrice());
        setLicense(offeringDescription.getLicense());
        setInputs(offeringDescription.getInputs());
        setOutputs(offeringDescription.getOutputs());
        setFormat(offeringDescription.getFormat());
        setAccessInterfaceType(offeringDescription.getAccessInterfaceType());
        setEndpoints(offeringDescription.getEndpoints());
        setActivation(offeringDescription.getActivation());
        setSampleDataEnpoint(offeringDescription.getSampleDataEnpoint());
        setMetaDataEnpoint(offeringDescription.getMetaDataEnpoint());
        setTimePeriod(offeringDescription.getTimePeriod());
        setAccessList(offeringDescription.getAccessList());
        setFormat(offeringDescription.getFormat());
        setRequestTemplates(offeringDescription.getRequestTemplates());
        setResponseMapping(offeringDescription.getResponseMapping());
        setExtension1(offeringDescription.getExtension1());
        setExtension2(offeringDescription.getExtension2());
        setExtension3(offeringDescription.getExtension3());
    }

    public void copyFromLegacy(LegacyOfferingDescription legacyOfferingDescription) {

        this.setId(legacyOfferingDescription.id);
        this.setLocalId(legacyOfferingDescription.localId);
        this.setName(legacyOfferingDescription.name);
        this.setRdfType(legacyOfferingDescription.rdfType);
        this.setProviderId(legacyOfferingDescription.providerId);
        this.setDescription(legacyOfferingDescription.description);
        this.setEndpoints(legacyOfferingDescription.endpoints);
        this.setRegion(legacyOfferingDescription.region);
        this.setSampleDataEnpoint(legacyOfferingDescription.sampleDataEnpoint);
        this.setMetaDataEnpoint(legacyOfferingDescription.metaDataEnpoint);
        this.setPrice(legacyOfferingDescription.price);
        this.setLicense(legacyOfferingDescription.license);
        this.setInputs(ObjectParameter.from(legacyOfferingDescription.inputData));
        this.setOutputs(ObjectParameter.from(legacyOfferingDescription.outputData));
        this.setTimePeriod(legacyOfferingDescription.timePeriod);
        this.setAccessList(legacyOfferingDescription.accessList);
        this.setFormat(legacyOfferingDescription.format);
        this.setActivation(legacyOfferingDescription.activation);
        this.setRequestTemplates(legacyOfferingDescription.requestTemplates);
        this.setResponseMapping(legacyOfferingDescription.mapping);

    }

    @Override
    public String toString() {
        String response = "OFFERING[localId=" + id;
        if (name != null) {
            response += ", name=" + name;
        }
        if (description != null) {
            response += ", " + description.toString();
        }
        if (rdfType != null) {
            response += ", " + rdfType.toString();
        }
        if (endpoints != null && !endpoints.isEmpty()) {
            response += ", " + endpoints.get(0).toString();
        }

        if (outputs != null) {
            response += ", inputData=" + outputs.toString();
        }
        if (inputs != null) {
            response += ", outputData=" + inputs.toString();
        }
        if (region != null) {
            response += ", " + region.toString();
        }
        if (price != null) {
            response += ", " + price.toString();
        }
        if (license != null) {
            response += ", " + license.toString();
        }
        if (mapping != null) {
            response += ", " + mapping.toString();
        }
        response += "]";
        return response;
    }

}
